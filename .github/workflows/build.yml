name: Build
on:
  pull_request: {}
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: {}

jobs:
  build:
    name: Build (${{ matrix.channel }})
    runs-on: ubuntu-latest
    env:
      CI: 'true'
    strategy:
      fail-fast: false
      matrix:
        channel:
          - release
          - beta
    steps:
      - name: Set up Git
        run: |
          git config --global user.name "Tomster"
          git config --global user.email "tomster@emberjs.com"
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies (apt-get)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y tree

      - name: Disable AppArmor
        # Ubuntu >= 23 has AppArmor enabled by default, which breaks Puppeteer.
        # See https://github.com/puppeteer/puppeteer/issues/12818 "No usable sandbox!"
        # this is taken from the solution used in Puppeteer's own CI: https://github.com/puppeteer/puppeteer/pull/13196
        # The alternative is to pin Ubuntu 22 or to use aa-exec to disable AppArmor for commands that need Puppeteer.
        # This is also suggested by Chromium https://chromium.googlesource.com/chromium/src/+/main/docs/security/apparmor-userns-restrictions.md
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns

      - uses: actions/cache@v4
        name: Setup cache for puppeteer
        with:
          # See .puppeteerrc.cjs, where we set this as the place puppeteer
          # installs the browser. It needs to be cached the same as our pnpm
          # packages are because it won't get reinstalled if our modules are
          # cached.
          path: .puppeteer-cache
          key: ${{ runner.os }}-puppeteer-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (pnpm)
        run: |
          if [[ "$EMBER_RELEASE_CHANNEL" == "beta" ]]; then
            pnpm upgrade ember-cli@beta
          else
            pnpm upgrade ember-cli
          fi

          pnpm install
        env:
          EMBER_RELEASE_CHANNEL: ${{ matrix.channel }}
      - name: Lint (markdown source)
        run: pnpm lint:md:src
      - name: Lint (typescript)
        run: pnpm lint:ts
      - name: Compile (typescript)
        run: pnpm tsc
      - name: Generate
        run: pnpm generate
        env:
          # This is needed for external PRs to build, since secrets are not
          # available there. Get your own TomTom token for local development
          # at: https://developer.tomtom.com
          TOMTOM_ACCESS_TOKEN: 'gI4oJc3MF9PREfA3SIbN4ak7giIJPYcf'
      - name: Lint (markdown output)
        run: pnpm lint:md:dist
      - name: Prune artifacts
        if: always()
        working-directory: dist/code/super-rentals
        run: git clean -dfX
      - name: Upload artifacts (assets)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: assets (${{ matrix.channel }})
          path: dist/assets
      - name: Upload artifacts (markdown)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: markdown (${{ matrix.channel }})
          path: dist/markdown
      - name: Upload artifacts (code)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code (${{ matrix.channel }})
          path: dist/code/super-rentals
          include-hidden-files: true
      - name: Notify Discord # This is a step rather than a job because of the matrix
        uses: sarisia/actions-status-discord@v1
        if: ${{ failure() && github.event_name == 'schedule' }}
        with:
          webhook: ${{ secrets.CORE_META_WEBHOOK }}
          status: "Failure"
          title: "Super Rentals Tutorial Classic Build ${{ matrix.channel }}"
          color: 0xcc0000
          url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          username: GitHub Actions
